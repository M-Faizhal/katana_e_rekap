# Use PHP 8.2 with Apache
FROM php:8.2-apache

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libzip-dev \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libmcrypt-dev \
    libpq-dev \
    ca-certificates \
    gnupg \
    lsb-release \
    netcat-openbsd \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql pdo_pgsql mbstring exif pcntl bcmath gd zip

# Install Node.js 20.x (LTS)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Verify Node.js and npm installation
RUN node --version && npm --version

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Enable Apache modules
RUN a2enmod rewrite headers

# Copy Apache configuration
COPY docker/apache/vhost.conf /etc/apache2/sites-available/000-default.conf

# Copy dependency files first for better caching
COPY composer.json composer.lock package*.json ./

# Install PHP dependencies first
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist --no-scripts

# Copy existing application directory contents
COPY . /var/www/html

# Copy existing application directory permissions
COPY --chown=www-data:www-data . /var/www/html

# Complete PHP dependencies installation with scripts
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

# Install Node.js dependencies (including devDependencies for build)
RUN if [ -f "package.json" ]; then \
        echo "Installing Node.js dependencies..." && \
        npm ci --silent && \
        echo "Running npm audit fix..." && \
        npm audit fix --silent || true; \
    else \
        echo "No package.json found, skipping Node.js dependencies"; \
    fi

# Build assets
RUN if [ -f "package.json" ] && [ -f "vite.config.js" ]; then \
        echo "Building assets with Vite..." && \
        npm run build; \
    else \
        echo "No build configuration found, skipping asset build"; \
    fi

# Clean up node_modules to reduce image size (keep only production dependencies)
RUN if [ -f "package.json" ]; then \
        echo "Cleaning up development dependencies..." && \
        npm ci --only=production --silent; \
    fi

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache
RUN chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Create necessary directories
RUN mkdir -p /var/www/html/storage/logs \
    /var/www/html/storage/framework/cache \
    /var/www/html/storage/framework/sessions \
    /var/www/html/storage/framework/views \
    /var/www/html/storage/app/public

# Set permissions for storage
RUN chown -R www-data:www-data /var/www/html/storage
RUN chmod -R 775 /var/www/html/storage

# Create startup script
COPY docker/scripts/start.sh /usr/local/bin/start.sh
COPY docker/scripts/redeploy.sh /usr/local/bin/redeploy.sh
COPY docker/scripts/deploy-webhook.sh /usr/local/bin/deploy-webhook.sh
RUN chmod +x /usr/local/bin/start.sh /usr/local/bin/redeploy.sh /usr/local/bin/deploy-webhook.sh

# Health check to monitor application status
# Use a simpler approach that checks both Apache and Laravel
HEALTHCHECK --interval=30s --timeout=20s --start-period=120s --retries=3 \
    CMD curl -f http://localhost/health --max-time 15 --connect-timeout 5 -H "Accept: application/json" || \
        curl -f http://localhost/ --max-time 15 --connect-timeout 5 || exit 1

# Expose port 80
EXPOSE 80

# Use startup script
CMD ["/usr/local/bin/start.sh"]