# Use PHP 8.2 with Apache
FROM php:8.2-apache

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libzip-dev \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libmcrypt-dev \
    libpq-dev \
    ca-certificates \
    gnupg \
    lsb-release \
    netcat-openbsd \
    supervisor \
    cron \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql pdo_pgsql mbstring exif pcntl bcmath gd zip

# Install Node.js 20.x (LTS)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Verify Node.js and npm installation
RUN node --version && npm --version

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Enable Apache modules
RUN a2enmod rewrite headers

# Copy Apache configuration
COPY docker/apache/vhost.conf /etc/apache2/sites-available/000-default.conf

# Copy package.json and package-lock.json first (for better caching)
COPY package*.json ./

# Install Node.js dependencies (including devDependencies for build process)
RUN if [ -f "package.json" ]; then \
        echo "Installing Node.js dependencies..." && \
        npm ci --silent; \
    else \
        echo "No package.json found, skipping Node.js dependencies"; \
    fi

# Copy source files needed for build
COPY resources/ ./resources/
COPY vite.config.js ./

# Build assets
RUN if [ -f "package.json" ]; then \
        echo "Building assets with Vite..." && \
        npm run build && \
        echo "Assets built successfully"; \
    else \
        echo "No package.json found, skipping asset build"; \
    fi

# Copy remaining application files
COPY . /var/www/html

# Copy existing application directory permissions
COPY --chown=www-data:www-data . /var/www/html

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

# Remove devDependencies after build to reduce image size
RUN if [ -f "package.json" ]; then \
        npm prune --production; \
    fi

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache
RUN chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Create necessary directories
RUN mkdir -p /var/www/html/storage/logs \
    /var/www/html/storage/framework/cache \
    /var/www/html/storage/framework/sessions \
    /var/www/html/storage/framework/views \
    /var/www/html/storage/app/public \
    /var/log/supervisor

# Set permissions for storage
RUN chown -R www-data:www-data /var/www/html/storage
RUN chmod -R 775 /var/www/html/storage

# Create startup script
COPY docker/scripts/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# Create supervisor configuration
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create deployment check script
COPY docker/scripts/deployment-check.sh /usr/local/bin/deployment-check.sh
RUN chmod +x /usr/local/bin/deployment-check.sh

# Create deploy hook script
COPY docker/scripts/deploy-hook.sh /usr/local/bin/deploy-hook.sh
RUN chmod +x /usr/local/bin/deploy-hook.sh

# Health check to monitor application status
# Enhanced health check with auto-restart capability
HEALTHCHECK --interval=30s --timeout=20s --start-period=120s --retries=5 \
    CMD /usr/local/bin/deployment-check.sh || exit 1

# Expose port 80
EXPOSE 80

# Use startup script with supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]